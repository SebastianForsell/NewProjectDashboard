@model List<MainSite.Models.Projekt>
@{
/*
skapa knappar för varje projekt item (samma som projektstabellen), den knappen drar upp ett förmulär
där man skriver in timmar och kommentar etc.
Skickar in det till databasen som då sparar det, stänger rutan?/partialvyn? efter det (DONE!)

Skapa knapp som skapar nya projekt och sedan uppdaterar listan med AJAX
*/
    <button id="createItemButton"> Skapa nytt Item </button>
    <table id="projectItemTable" class="table table-striped">
        <thead>
            <tr>
                <td>Name</td>
                <td>Utveckling</td>
                <td>Total tid</td>
                <td>Deadline</td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                var itemID = item.ProjektItems.Select(x => x.ID).ToList();
                foreach (var id in itemID)
                {
                    <tr>
                        <td>

                            @{
                                var names = item.ProjektItems.Select(x => x.Name);
                                foreach (var name in names)
                                {
                                    @item.ProjektItems.
                                }
                            }

                        </td>
                        <td>
                            @{
                                string progressClass;
                                int[] totalWorkedArray = item.ProjektItems.Select(x => x.Kommentarers.Where(y => y.ItemID == id).Sum(z => z.AntalTimmar)).ToArray();
                                double totalWorked = totalWorkedArray.Sum();
                                double totalHour = item.ProjektItems.Where(x => x.ProjektID == item.ID).FirstOrDefault().TotalTid;
                                if ((totalWorked / totalHour) <= 0.25)
                                {
                                    progressClass = "progressBarLow";
                                }
                                else if ((totalWorked / totalHour) > 0.25 && (totalWorked / totalHour) <= 0.75)
                                {
                                    progressClass = "progressBarMedium";
                                }
                                else if ((totalWorked / totalHour) > 0.75 && (totalWorked / totalHour) < 0.99)
                                {
                                    progressClass = "progressBarHigh";
                                }
                                else
                                {
                                    progressClass = "progressBarFull";
                                }
                                <progress id="@item.ID" value="@totalWorked" max="@totalHour" class="@progressClass">  </progress><br />
                                /*
                                    post model ID with ajax to partialview controller
                                    to show project items (DONE!)
                                */
                            }
                            @{
                                var userNames = item.SystemUsers.Where(user => item.ID == user.ProjektID).Select(x => x.Username).ToList();
                                foreach (var user in userNames)
                                {
                                    char[] name = @user.ToUpper().Take(2).ToArray();
                                    <div class="circleMe">@name[0]@name[1]</div>
                                    /*
                                    post model user ID with ajax to view controller
                                    to show user page
                                    */

                                }
                            }
                        </td>
                        <td>@item.ProjektItems.Distinct().Select(x => x.TotalTid)</td>
                        @{     //TA BORT FIRSTORDEFAULT OCH GÖR OM
                            string dayClass = "";

                            if (item.ProjektItems.Select(x => x.Deadline).FirstOrDefault().Subtract(DateTime.Today.Date).Days == 1)
                            {
                                ViewBag.DeadlineLeft = "Dag kvar";
                            }
                            else
                            {
                                ViewBag.DeadlineLeft = "Dagar kvar";
                            }
                            if (item.ProjektItems.Select(x => x.Deadline).FirstOrDefault().Subtract(DateTime.Today.Date).Days <= 7 && item.ProjektItems.Select(x => x.Deadline).FirstOrDefault().Subtract(DateTime.Today.Date).Days >= 0)
                            {
                                dayClass = "projectDateColourClass1";
                            }
                            else if (item.ProjektItems.Select(x => x.Deadline).FirstOrDefault().Subtract(DateTime.Today.Date).Days < 0)
                            {
                                if ((totalWorked / totalHour) <= 0.99)
                                {
                                    dayClass = "projectDateColourClass1";
                                }
                                else if ((totalWorked / totalHour) > 0.99)
                                {
                                    dayClass = "projectDateColourClass2";
                                }
                            }
                        }
                        <td class="@dayClass">
                            @item.Deadline.Subtract(DateTime.Today.Date).Days @{

                                @ViewBag.DeadlineLeft
                            }
                        </td>
                        <td>
                            <button id="@id" class="addHours" value="@id">Lägg till</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <div class="table-responsive addHourWindow" title="Lägg till Kommentar och Timmar" style="display:none">

        @*var itemIDs = Model.Select(x => x.ProjektItems.Select(y => y.Kommentarers.Select(z => z.ItemID)));*@


        <form id="addHoursForm">
            <input id="userID" type="hidden" value="2" />
            <div>
                <label for="addHoursText"> Timmar: </label>
                <input type="number" id="addHoursText" min="0" max="50">
            </div>
            <div>
                <label for="addComment"> Kommentar:</label>
                <textarea id="addComment"></textarea>
            </div>
            <div>
                <label for="addDate"> Datum skapad: </label>
                <input type="date" id="addDate">
            </div>
        </form>
    </div>
    <div id="createProjectItemWindow" class="table-responsive" title="Lägg till ett Item" style="display: none">
        <form>
            @{
                var projektId = Model.Select(x => x.ID).FirstOrDefault();
                <input id="projectIDInput" type="hidden" value="@projektId" />
                
                <label for="nameInput">Namn</label><br />
                <input type="text" id="nameInput" /><br /><br />

                // <input type="hidden"/> userid

                // <input type="number" /> utvecklade timmar

                <label for="totalInput">Total tid</label><br />
                <input type="number" id="totalInput" /><br /><br />

                <label for="dateInput">Deadline</label><br />
                <input type="date" id="dateInput"/><br /><br />
            }

        </form>

    </div>
}